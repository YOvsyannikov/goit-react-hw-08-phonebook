{"version":3,"file":"static/js/login-view.56a438c8.chunk.js","mappings":"sRACA,EAAuB,wBAAvB,EAA2D,6B,SCS5C,SAASA,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAYC,EAAAA,EAAAA,IAAYC,EAAAA,IAC9B,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,QACHN,EAASO,GACT,MAEF,IAAK,WACHL,EAAYK,GACZ,MAEF,QACE,OAEL,EAYD,OACE,kBAAMC,SAXa,SAAAJ,GAEnB,GADAA,EAAEK,iBACmB,KAAjBV,EAAMW,QAAqC,KAApBT,EAASS,OAClC,OAAOC,EAAAA,GAAAA,MAAY,2CAErBlB,EAASmB,EAAAA,eAAAA,MAAqB,CAAEb,MAAAA,EAAOE,SAAAA,KACvCD,EAAS,IACTE,EAAY,GACb,EAG+BW,UAAWC,EAAQC,aAAa,MAA9D,WACE,SAACC,EAAA,EAAD,CACEC,MAAM,QACNC,QAAQ,WACRC,MAAM,YACNC,KAAK,QACLd,KAAK,QACLC,MAAOR,EACPsB,SAAUlB,EACVU,UAAWC,KAGb,SAACE,EAAA,EAAD,CACEC,MAAM,WACNC,QAAQ,WACRC,MAAM,YACNC,KAAK,WACLd,KAAK,WACLC,MAAON,EACPoB,SAAUlB,EACVU,UAAWC,KAGXnB,IACA,SAAC2B,EAAA,EAAD,CACEJ,QAAQ,YACRC,MAAM,YACNI,KAAK,QACLH,KAAK,SAJP,oBAUDzB,IAAa,SAAC6B,EAAA,EAAD,MAGnB,C","sources":["webpack://goit-react-hw-08-phonebook/./src/views/LoginView/LoginView.module.css?c53e","views/LoginView/LoginView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginView_form__zcR3f\",\"textField\":\"LoginView_textField__K6uwx\"};","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { authOperations } from '../../redux/auth/auth-operations';\nimport { authSelectors } from '../../redux/auth/auth-selectors';\nimport { toast } from 'react-toastify';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport LoaderComponent from '../../components/LoaderComponent/LoaderComponent';\nimport s from './LoginView.module.css';\n\nexport default function LoginView() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(authSelectors.getIsLoggedIn);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'email':\n        setEmail(value);\n        break;\n\n      case 'password':\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (email.trim() === '' || password.trim() === '') {\n      return toast.error('ðŸ’© Please fill in all fields!');\n    }\n    dispatch(authOperations.logIn({ email, password }));\n    setEmail('');\n    setPassword('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={s.form} autoComplete=\"off\">\n      <TextField\n        label=\"Email\"\n        variant=\"outlined\"\n        color=\"secondary\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        className={s.textField}\n      />\n\n      <TextField\n        label=\"Password\"\n        variant=\"outlined\"\n        color=\"secondary\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        className={s.textField}\n      />\n\n      {!isLoading && (\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          type=\"submit\"\n        >\n          Log in\n        </Button>\n      )}\n\n      {isLoading && <LoaderComponent />}\n    </form>\n  );\n}\n"],"names":["LoginView","dispatch","useDispatch","isLoading","useSelector","authSelectors","useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","onSubmit","preventDefault","trim","toast","authOperations","className","s","autoComplete","TextField","label","variant","color","type","onChange","Button","size","LoaderComponent"],"sourceRoot":""}